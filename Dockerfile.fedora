ARG BASE_IMAGE=fedora:32

FROM $BASE_IMAGE as build

COPY docker-files/su-entrypoint.c \
     docker-files/su-exec.c \
     /usr/local/bin/

# build utilities
RUN set -eux; \
    dnf -y update; \
    buildDeps='gcc glibc-devel make'; \
    dnf install -y $buildDeps; \
    gcc -DENTRYPOINT="\"/usr/local/bin/entrypoint.sh\"" -Wall \
         /usr/local/bin/su-entrypoint.c -o/usr/local/bin/su-entrypoint; \
    chown root:root /usr/local/bin/su-entrypoint; \
    chmod 4111 /usr/local/bin/su-entrypoint; \
    gcc -Wall \
        /usr/local/bin/su-exec.c -o/usr/local/bin/su-exec; \
    chown root:root /usr/local/bin/su-exec; \
    chmod 0755 /usr/local/bin/su-exec; \
    dnf remove -y $buildDeps; \
    dnf clean all;

# grab tini for signal processing and zombie killing
ENV TINI_VERSION v0.19.0
RUN set -eux; \
    dnf -y update; \
    dnf install -y wget ca-certificates gpg dirmngr; \
    \
    wget -O /usr/local/bin/tini "https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini"; \
    wget -O /usr/local/bin/tini.asc "https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini.asc"; \
    export GNUPGHOME="$(mktemp -d)"; \
    for server in $(shuf -e ha.pool.sks-keyservers.net \
                                hkp://p80.pool.sks-keyservers.net:80 \
                                keyserver.ubuntu.com \
                                hkp://keyserver.ubuntu.com:80 \
                                pgp.mit.edu) ; do \
        gpg --no-tty --keyserver "$server" --recv-keys 6380DC428747F6C393FEACA59A84159D7001A4E5 && break || : ; \
    done; \
    gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini; \
    { command -v gpgconf > /dev/null && gpgconf --kill all || :; }; \
    rm -rf "$GNUPGHOME" /usr/local/bin/tini.asc; \
    chmod +x /usr/local/bin/tini; \
    tini -h; \
    dnf remove -y wget; \
    dnf clean all

FROM $BASE_IMAGE
LABEL maintainer "Dmitri Rubinstein <dmitri.rubinstein@dfki.de>"

USER root

# copy artifacts from build environment
COPY --from=build /usr/local/bin/su-entrypoint /usr/local/bin/su-exec /usr/local/bin/tini \
     /usr/local/bin/

# Build toolbox

RUN set -eux; \
    pypkg='python3 python3-pip'; \
    dnf update -y; \
    if [ -e /etc/redhat-release ] && [ ! -e /etc/fedora-release ]; then dnf install epel-release -y; fi; \
    dnf install -y \
        openssl-devel openssh-clients sshpass curl gnupg2 \
        ca-certificates ${pypkg} rsync bash git curl sudo \
        ; \
    dnf clean all; \
    ln -s /usr/bin/python3 /usr/bin/python || true; \
    ln -s /usr/bin/pip3 /usr/bin/pip || true;

WORKDIR /app
COPY docker-files/requirements.txt ./

RUN set -eux; \
    PYTHON='python3'; \
    pypkg='python3-devel'; \
    ${PYTHON} -m pip install --upgrade pip; \
    ${PYTHON} -m pip install --upgrade setuptools; \
    dnf update -y; \
    dnf install -y \
        gcc ${pypkg} \
        ; \
    ${PYTHON} -m pip install --upgrade pycrypto cryptography; \
    ${PYTHON} -m pip install -r /app/requirements.txt; \
    dnf remove -y gcc ${pypkg}; \
    dnf clean all;

RUN dnf update -y && dnf install -y vim less

# User configuration

ARG APP_USER
ARG APP_GROUP
ARG APP_UID
ARG APP_GID
ARG APP_HOME

ENV APP_USER ${APP_USER:-toolbox}
ENV APP_GROUP ${APP_GROUP:-${APP_USER}}
ENV APP_UID ${APP_UID:-65534}
ENV APP_GID ${APP_GID:-65534}
ENV APP_HOME="/mnt"

# Setup entrypoint

COPY docker-files/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

CMD ["/bin/sh", "-c", "trap exit INT TERM; while true; do sleep 10000000; done"]
